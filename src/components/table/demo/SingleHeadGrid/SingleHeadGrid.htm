<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <style type="text/css">
        /*
        DataGridView Dom结构

        DataGridDiv（div）
            |
            DataGridHeadDiv(div)
            |    |
            |    DataGridHead(table)[表头数据 列宽调整操作]
            |           |
            |           <table>
            |                <thead>
            |                    <tr>
            |                        <th><div><span></span></div></th>
            |                         ....
            |                         <th><div><span></span></div></th>
            |                     <tr/>
            |                  <thead/>
            |             </table>  (HTML中声明部分)
            |
            DataGridBodyDiv(div)
                 |
                 DataGridBody(table)[数据主体]
                        |
                        <table>
                            <tbody>
                                <tr>
                                    <td><div></div></td>
                                     ....
                                    <td><div></div></td>
                                </tr>
                            </tbody>
                         </table>
               
        */
        .DataGridDiv
        {
            position: relative;
            width: 350px; /* ★需要利用javascript 调节的参数*/
            border: 1px solid Green;
            z-index: 999;
        }
        .DataGridHeadDiv
        {
            position: relative;
            width: 100%;
            height: auto; 
            overflow: auto;
            background-color: #F0F0F0; /*和滚动条颜色一致*/
            overflow-x: hidden; /*表头的横坐标的滚动条进行隐藏*/
        }
        .DataGridBodyDiv
        {
            position: relative;
            width: 100%;
            margin-top: 0px;
            overflow: auto;
            height: 100px; /*★需要利用javascript 调节的参数*/
        }
        .DataGridLeftTopFixColumnDiv
        {
        }
        .DataGridLeftFixColumnDiv
        {
        }
        
        .DataGridHead
        {
            position: relative;
            table-layout: fixed; /*重要的设置 只要定义table标签的第一行的没列宽度 后续的行都以该长度进行展示*/
            width: auto;
            font-family: Arial;
            font-size: 9pt;
            border-collapse: collapse;
            border-bottom: 1px solid Gray;
            background-color: White;
            margin-top: 0px;
        }
        .DataGridHead tr
        {
            line-height: 22px;
        }
        .DataGridHead thead tr th
        {
            border-right: 1px solid Gray;
            background-image: url("tcHTabBack.gif");
            background-repeat: repeat-x;
            background-position: left center;
            padding: 0px 0px 0px 0px; /*紧凑点*/
            color: #333;
            -moz-user-select: none;
            width: auto;
        }
        .DataGridHead th div span
        {
            /* 调整列宽功能时 在列与列之间的结合处 使用 一个span标签 为了各种浏览器的兼容性 需要将该span嵌入div中而不是 直接嵌入单元格*/
            position: absolute;
            right: 0px;
            top: 0px;
            height: 99%;
            width: 3px;
            cursor: col-resize;
        }
        .DataGridBody
        {
            position: relative;
            table-layout: fixed; /*重要的设置 只要定义table标签的第一行的没列宽度 后续的行都以该长度进行展示*/
            width: auto;
            font-family: Arial;
            font-size: 9pt;
            border-collapse: collapse;
            border-bottom: 1px solid Gray;
            background-color: White;
            margin-top: 0px;
        }
        .DataGridBody tr
        {
            line-height: 21px;
        }
        .DataGridBody tr:hover
        {
            background-color: #add8e6;
        }
        
        .DataGridBody tbody tr td
        {
            width: auto;
            height: auto;
            text-align: center;
            border-right: 1px solid #A7A6AA;
            border-bottom: 1px dashed #A7A6AA;
            color: #333333;
            padding: 0px 0px 0px 0px; /*紧凑*/
            cursor: pointer;
        }
        .DataGridBody tr td div, .DataGridHead tr th div
        {
            position: relative;
            white-space: nowrap;
            height: 100%;
            width: 100%;
            margin: 0px 0px 0px 0px;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .DataGridHead tr th div span
        {
            /* 调整列宽功能时 在列与列之间的结合处 使用 一个span标签 为了各种浏览器的兼容性 需要将该span嵌入div中而不是 直接嵌入单元格*/
            position: absolute;
            right: 0px;
            top: 0px;
            height: 99%;
            width: 3px;
            cursor: col-resize;
            background-color: #acd8e6;
        }
        .XZGrid_VerticalLine
        {
            position: absolute;
            width: 1px;
            z-index: 1000;
            left: -900px;
            -moz-user-select: none;
            display: block;
            background-color: Black;
        }
    </style>
    <script language="javascript" type="text/javascript">



        var XZ = window.XZ || {};
        XZ.DataGridView = function (tableID, parameters) {
            var _this = this;
            var doc = document;

            var DataGridCollocation = {
                "DataGridHeadRowHeight": "23px",
                "DataGridBodyRowHeight": "21px"
            }
            var resizeColumnWidthing = false; /*中间变量用于标识是否正在调整列宽*/
            _this.DataGridHead = doc.getElementById(tableID); /*获得表头table对象*/
            _this.DataGridDiv = _this.DataGridHead.parentNode; /*获得包裹整个DataGridView的Div*/
            _this.DataGridHeadDiv = doc.createElement("div"); /*创建一个包裹表头的Div*/
            _this.DataGridBodyDiv = doc.createElement("div"); /*创建一个包裹表体的Div*/
            _this.DataGridBody = doc.createElement("table"); /*创建数据主体的Table标签*/
            _this.XZGrid_VerticalLine = doc.createElement("div"); /*创建调整列宽的垂直线*/
            XZ.DomStyle.SetClass(_this.XZGrid_VerticalLine, "XZGrid_VerticalLine");
            XZ.EventUnit.addEvent(_this.XZGrid_VerticalLine, "selectstart", function () { return false; });
            doc.body.appendChild(_this.XZGrid_VerticalLine);
            if (_this.DataGridDiv.tagName != "DIV") {
                alert("HTML 的预定义的格式不正确");
                throw new Error("HTML 的预定义的格式不正确");
            }
            _this.DataGridHead.setAttribute("cellpadding", "0");
            _this.ColumnNameItems = parameters.Columns || [];
            _this.CanResizeWidthTHS = _this.DataGridHead.getElementsByTagName("th");


            /*私有方法 初始化DataGridView 的基本框架 主要是支持固定表头的功能
            第一步.创建一个DIV(DataGridHeadDiv)  将HTML声明的 DataGridHead(table)填入其中
            第二步.创建一个DIV(DataGridBodyDiv)  再创建一个table(DataGridBody)[数据主体]
            */
            function InitFrame() {
                _this.DataGridHeadDiv.appendChild(_this.DataGridHead);
                _this.DataGridDiv.appendChild(_this.DataGridHeadDiv);
                _this.DataGridDiv.appendChild(_this.DataGridBodyDiv);
                _this.DataGridBodyDiv.appendChild(_this.DataGridBody);
                XZ.DomStyle.SetClass(_this.DataGridHeadDiv, "DataGridHeadDiv");
                XZ.DomStyle.SetClass(_this.DataGridBodyDiv, "DataGridBodyDiv");
                XZ.DomStyle.SetClass(_this.DataGridHead, "DataGridHead");
                XZ.DomStyle.SetClass(_this.DataGridBody, "DataGridBody");
                XZ.DomStyle.SetCss(_this.XZGrid_VerticalLine, {
                    "height": parseInt(_this.DataGridDiv.offsetHeight) + "px",
                    "top": XZ.DomPosition.getAbsulotePosition(_this.DataGridDiv).top + "px"
                });

                XZ.EventUnit.addEvent(_this.DataGridBodyDiv, "scroll", function (event) {
                    _this.DataGridHead.style["left"] = (0 - _this.DataGridBodyDiv.scrollLeft) + "px";
                });

                var VerticalLineStartLeft = 0;
                /*用于列的移动*/
                XZ.EventUnit.addEvent(_this.DataGridDiv, "mousedown", function (event) {
                    var MdTarget = XZ.EventUnit.getTarget(event);
                    /*当触发元素是span的时候才进行移动列操作
                    判断条件需加强  
                    注册mousemove事件*/
                    if (MdTarget.tagName == "SPAN") {
                        VerticalLineStartLeft = parseInt(event.clientX);
                        _this.XZGrid_VerticalLine.style["left"] = VerticalLineStartLeft + 2 + "px";
                        ReSizeWidthCell = MdTarget.parentNode;
                        while (ReSizeWidthCell.tagName != "TH") {
                            ReSizeWidthCell = ReSizeWidthCell.parentNode;
                        }
                        XZ.EventUnit.addEvent(_this.DataGridDiv, "mousemove", DataGridMoveMethod);
                        resizeColumnWidthing = true;
                        XZ.EventUnit.stopEvent(event); /*避免拖动的时候 其他元素被选中*/
                    }

                });
                XZ.EventUnit.addEvent(_this.DataGridDiv, "mouseup", function (event) {
                    /*注销mouseMove事件*/
                    _this.XZGrid_VerticalLine.style["left"] = -999 + "px";
                    columnChangeWidth = parseInt(event.clientX) - VerticalLineStartLeft;
                    RefreshColomnWidth(ReSizeWidthCell);
                    ReSizeWidthCell = null;
                    VerticalLineStartLeft = 0;
                    XZ.EventUnit.removeEvent(_this.DataGridDiv, "mousemove", DataGridMoveMethod);
                    resizeColumnWidthing = false;
                    columnChangeWidth = 0;
                });
            }

            function DataGridMoveMethod(event) {
                if (resizeColumnWidthing && ReSizeWidthCell != null) {
                    _this.XZGrid_VerticalLine.style["left"] = event.clientX + 2 + "px";
                } else {
                }
            }

            var ReSizeWidthCell = null; /*正在调整列宽的TD对象*/
            var columnChangeWidth = 0;
            var DataGridBodyFirstRowTDs = null; /*这个变量在每次更新数据的时候会有变动 在DataBind方法是更新*/
            function RefreshColomnWidth(ReSizeCell) {
                if (XZ.Logic.IsInvalid(ReSizeCell)) {
                    return;
                }
                var CurrentColWidth = parseInt(ReSizeCell.offsetWidth) + columnChangeWidth;

                var GridWidth = parseInt(_this.DataGridHead.offsetWidth) + columnChangeWidth;
                _this.DataGridHead.style["width"] = _this.DataGridBody.style["width"] = GridWidth + "px";
                var ColIndex = parseInt(ReSizeCell.getAttribute(Th2TdMapping));
                ReSizeCell.style["width"] = DataGridBodyFirstRowTDs[ColIndex].style["width"] = CurrentColWidth + "px";
                _this.DataGridHead.style["left"] = (0 - _this.DataGridBodyDiv.scrollLeft) + "px";
            }

            /*每次重新数据绑定的时候 都将之前的数据全部清除
            对DataGridBody 中的tbody全部remove
            重新创建一个tbody加入 DataGridBody中  
            */
            function ReBuildTBody() {
                var tbodys = _this.DataGridBody.getElementsByTagName("tbody");
                for (var i = tbodys.length - 1; i >= 0; i--) {
                    _this.DataGridBody.removeChild(tbodys[i]);
                }
                return doc.createElement("tbody");
            }

            _this.DataBind = function (_DataSource) {
                if (XZ.Logic.IsInvalid(_DataSource) || _DataSource.length == 0) {
                    /*显示无数据提示*/
                    return;
                }
                var htmlBody = ReBuildTBody();
                for (var rowIndex = 0, j = _DataSource.length; rowIndex < j; rowIndex++) {
                    var htmlRow = doc.createElement("tr");
                    var RowData = _DataSource[rowIndex];
                    /*在数据源的基础之上增加一列空列 是为了辅助列的调宽功能*/
                    for (var colIndex = 0, k = _this.ColumnNameItems.length + 1; colIndex < k; colIndex++) {
                        /*
                        每个单元格 td标签不直接包含内容 而是包含一个div
                        进而div去包含单元格的实际内容
                        */
                        var div = doc.createElement("div");
                        var htmlCell = doc.createElement("td");
                        if (rowIndex == 0 && colIndex < k - 1) {
                            MatchColumnWidth(colIndex, htmlCell);
                        }

                        if (colIndex < k - 1) {
                            var ColName = _this.ColumnNameItems[colIndex];
                            div.innerHTML = RowData[ColName];
                        }
                        htmlCell.appendChild(div);
                        htmlRow.appendChild(htmlCell);
                    }
                    htmlBody.appendChild(htmlRow);
                }
                _this.DataGridBody.appendChild(htmlBody);
                DataGridBodyFirstRowTDs = _this.DataGridBody.getElementsByTagName("tr")[0].getElementsByTagName("td");

            }
            /*匹配表头和表体的列宽 在两个table的table-layout 都为fixed的情况下 
            * 只是需要将第一行的单元格的宽度固定既可
            */
            function MatchColumnWidth(colIndex, DataGridBodyCell) {
                /*我们将相互对应的单元格设为一组 以相同的name属性进行标识
                当移动列的时候是需要将这组的宽度进行重新调整
                */
                var th = _this.CanResizeWidthTHS[colIndex];
                var w = parseInt(th.style["width"]);
                th.style["width"] = DataGridBodyCell.style["width"] = w + "px";
            }
            var Th2TdMapping = "xzGridTh2TdMapping";
            /*在css中datagridbody 和 datagridbody width 的属性都设置为auto这样方便通用的css调用
            但是存在浏览器兼容性的问题 在设置为auto 后表格中的内容不会随着单元格宽度变化而变化
            */
            var DataGridEffectiveWidth = 0;
            for (var i = 0, j = _this.CanResizeWidthTHS.length; i < j; i++) {
                var TH = _this.CanResizeWidthTHS[i];
                if (i == j - 1) {
                    continue;
                }
                DataGridEffectiveWidth += parseInt(TH.style["width"]);
                TH.setAttribute(Th2TdMapping, i);
            }
            function SetDataGridWidth(_w) {
                _this.DataGridBody.style["width"] = _this.DataGridHead.style["width"] = (_w + 2) + "px";
            }
            SetDataGridWidth(DataGridEffectiveWidth);
            InitFrame();
        }

        XZ.DataGridView.prototype = {
            /*进行自定义事件的管理*/
            addEvent: function (eventName, callback) {

            },
            removeEvent: function (eventName) {

            },
            fire: function (eventName) {

            }
        }

        XZ.Span = {
            GetRowSpan: function (ThOrTd) {
                var RowSpan = ThOrTd.getAttribute("rowspan");
                if (XZ.Logic.IsInvalid(RowSpan)) {
                    return 1;
                } else {
                    return parseInt(RowSpan);
                }
            },
            GetColSpan: function (ThOrTd) {
                var ColSpan = ThOrTd.getAttribute("colspan");
                if (XZ.Logic.IsInvalid(ColSpan)) {
                    return 1;
                } else {
                    return parseInt(ColSpan);
                }
            }
        }
        XZ.Logic = {
            IsInvalid: function (p) {
                if (p == undefined || p == null) {
                    return true;
                }
                return false;
            }
        }
        XZ.DomStyle = {
            SetClass: function (DomObj, ClassName) {
                if (typeof ClassName != "string") {
                    var mes = "ClassName 为CSS中定义的css类名 为字符串类型";
                    alert(mes);
                    throw new Error(mes);
                }
                DomObj.setAttribute("class", ClassName);
                DomObj.setAttribute("className", ClassName);
            },
            SetCss: function (DomObj, Styles) {
                for (var css in Styles) {
                    if (!Styles.hasOwnProperty(css)) continue;
                    DomObj.style[css] = Styles[css];
                }
            }
        }
        String.prototype.IsEmpty = function () {
            var IsEmpty = new RegExp(/(^\s*$)/g);
            return IsEmpty.test(this);
        }
        XZ.DomPosition = {
            getAbsulotePosition: function (obj) {
                var obj1 = obj;
                var position = { "left": obj1.offsetLeft, "top": obj1.offsetTop };

                while (obj1.offsetParent) {
                    obj1 = obj1.offsetParent;
                    position.left += obj1.offsetLeft;
                    position.top += obj1.offsetTop;
                }
                while (obj.parentNode != document.body) {
                    obj = obj.parentNode;
                    position.left -= obj.scrollLeft;
                    position.top -= obj.scrollTop;
                }
                return position;
            }
        }

        XZ.EventUnit = {
            getEvent: function (e) {
                return window.event || e;
            },
            getTarget: function (e) {
                var ev = XZ.EventUnit.getEvent(e);
                return ev.target || ev.srcElement;
            },
            addEvent: function (DomObj, eventName, callBack) {
                if (window.attachEvent) {
                    DomObj.attachEvent("on" + eventName, callBack);
                }
                else if (window.addEventListener) {
                    DomObj.addEventListener(eventName, callBack, false);
                } else {
                    DomObj["on" + eventName] = callBack;
                }
            },
            removeEvent: function (DomObj, eventName, callBack) {
                if (window.detachEvent) {
                    DomObj.detachEvent("on" + eventName, callBack);
                }
                else if (window.removeEventListener) {
                    DomObj.removeEventListener(eventName, callBack, false);
                } else {
                    DomObj["on" + eventName] = null;
                }
            },
            stopPropagation: function (event) {
                var e = XZ.EventUnit.getEvent(event);
                if (e.stopProgation) {
                    e.stopPropagation();
                }
                else {
                    e.cancelBubble = true;
                }
            },
            preventDefault: function (event) {
                var e = XZ.EventUnit.getEvent(event);
                if (e.preventDefault) {
                    e.preventDefault();
                }
                else {
                    e.returnValue = false;
                }
            },
            stopEvent: function (event) {
                XZ.EventUnit.stopPropagation(event);
                XZ.EventUnit.preventDefault(event);
            }
        }


        XZ.PaginationDataGridView = function (tableID, parameters) {
            var _this = this;
            _this.DataGridView = new XZ.DataGridView(tableID, parameters);
            _this.DataGridView.DataBind(DataSource);
        }
        var DataSource = [
        { "CustomerID": "937238", "CustomerName": "北京XXX有限公司", "Address": "北京市上地*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-2323232-2323", "CreateTime": "2010-12-03" },
        { "CustomerID": "5232323", "CustomerName": "深圳XXX有限公司", "Address": "北京市上地*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-6323232-2323", "CreateTime": "2010-12-03" },
        { "CustomerID": "94543823", "CustomerName": "上海XXX有限公司", "Address": "上海霞飞路*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-5323232-2323", "CreateTime": "2010-12-03" },
        { "CustomerID": "23423428", "CustomerName": "南昌XXX有限公司", "Address": "南昌市胜利*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-4323232-2323", "CreateTime": "2010-12-03" },
        { "CustomerID": "937234233", "CustomerName": "江西XXX有限公司", "Address": "江西省新余市抱石大道*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-923232-2323", "CreateTime": "2008-12-03" },
        { "CustomerID": "987763823", "CustomerName": "新余XXX有限公司", "Address": "新余市上地*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-275232-2323", "CreateTime": "2011-12-03" },
        { "CustomerID": "23423428", "CustomerName": "罗坊XXX有限公司", "Address": "罗坊镇罗北*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-2323232-2323", "CreateTime": "2010-12-03" },
        { "CustomerID": "939883", "CustomerName": "江西XXX有限公司", "Address": "江西市*****路**号", "PhoneCall": "0789-324533", "Fax": "0989-2323232-2323", "CreateTime": "2011-12-03"}];
        window.onload = function () {
            //            var MyGrid = new XZ.DataGridView("DataGridHead", {
            //                "Columns": ["Name", "ID", "Age", "Sex"]
            //            });
            //            MyGrid.DataBind(DataSource);
            var grid = new XZ.PaginationDataGridView("DataGridHead", {
                "Columns": ["CustomerID", "CustomerName", "Address", "PhoneCall", "Fax", "CreateTime"]
            });
        }

    </script>
</head>
<body>
    <span id="mes"></span>
    <div style="position: absolute; left: 200px; top: 100px">
        <div class="DataGridDiv">
            <table id="DataGridHead">
                <thead onselectstart="return false;">
                    <tr>
                        <th style="width: 70px;">
                            <div>
                                编号<span></span></div>
                        </th>
                        <th style="width: 80px;">
                            <div>
                                客户<span></span></div>
                        </th>
                        <th style="width: 80px;">
                            <div>
                                地址<span></span></div>
                        </th>
                        <th style="width: 80px;">
                            <div>
                                电话<span></span></div>
                        </th>
                        <th style="width: 80px;">
                            <div>
                                传真<span></span></div>
                        </th>
                        <th style="width: 80px;">
                            <div>
                                创建时间<span></span></div>
                        </th>
                        <th>
                        </th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</body>
</html>
